program        → declaration* EOF ;


declaration    → classDecl
               | funDecl
               | varDecl
               | typeDecl
               | statement ;

classDecl      → "class" IDENTIFIER ( "[" genericParams "]" )?
                 ( "<" genericType )? "{" ( function | field )* "}" ;
funDecl        → "fun" function ;
typeDecl       → "type" IDENTIFIER ( "[" genericParams "]" )? "=" typeExpr ;
varDecl        → "var" IDENTIFIER (":" typeExpr)? ( "=" expression )? ";" ;


statement      → exprStmt
               | forStmt
               | ifStmt
               | printStmt
               | returnStmt
               | whileStmt
               | block ;

exprStmt       → expression ";" ;
forStmt        → "for" "(" ( varDecl | exprStmt | ";" )
                           expression? ";"
                           expression? ")" statement ;
ifStmt         → "if" "(" expression ")" statement ( "else" statement )? ;
printStmt      → "print" expression ";" ;
returnStmt     → "return" expression? ";" ;
whileStmt      → "while" "(" expression ")" statement ;
block          → "{" declaration* "}" ;


expression     → assignment ;

assignment     → ( call "." )? IDENTIFIER "=" assignment
               | logicOr;

logicOr       → logicAnd ( "or" logicAnd )* ;
logicAnd      → equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication → unary ( ( "/" | "*" ) unary )* ;

unary          → ( "!" | "-" ) unary | call ;
call           → primary (
                   ( "[" genericArgs "]" )? "(" arguments? ")" | "." IDENTIFIER
                 )* ;
primary        → "true" | "false" | "nil" | "this"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER ;


typeExpr       → nonUnionType ( "|" nonUnionType )* ;
nonUnionType   → funType | genericType ;
genericType    → IDENTIFIER ( "[" genericArgs "]" )? ;
funType        → "fun" "(" typeParameters ")" ( ":" typeExpr )? ;
funTypeParams  → typeExpr ( "," typeExpr )* ;


field          → IDENTIFIER ":" typeExpr ;

function       → IDENTIFIER ( "[" genericParams "]" )?
                 "(" parameters? ")" (":" typeExpr)? block ;
parameters     → parameter ( "," parameter )* ;
parameter      → IDENTIFIER ":" typeExpr ;
arguments      → expression ( "," expression )* ;

genericParams  → genericParam ( "," genericParam )* ;
genericParam   → IDENTIFIER ( "<" typeExpr )? ;
genericArgs    → typeExpr ( "," typeExpr )* ;
